---
#
# Install/run 7daystodie server
#

- name: Gathering user info
  local_action: command whoami
  register: youruser

- name: Setup 7days user
  user: name=7days
          shell=/sbin/nologin generate_ssh_key=yes
          ssh_key_bits=2048
          ssh_key_file=.ssh/id_rsa
  become: true

#- authorized_key:
#    user: 7days
#    key: "{{ lookup('file', rsa_pub_key) }}"
#    manage_dir: yes
#  ignore_errors: true
#  vars:
#    rsa_pub_key: '/home/{{ youruser.stdout }}/.ssh/7d2d.pub'

- name: Bring OS up to date
  yum:
    name: "*"
    state: latest


- name: Install dependencies for SteamCMD
  yum: name={{ sdtd_packages }} state=present
  become: true
  vars:
    sdtd_packages:
    - glibc.i686
    - mesa-libGLU
    - libXcursor
    - libXrandr
    - libstdc++.i686
    - tar

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: 7days
    recurse: yes
    mode: 0755
  loop:
    - "{{ sdtd_saves }}"
    - "{{sdtd_home}}server"
    - "{{sdtd_home}}steamcmd"

- name: Download SteamCMD
  get_url:
    url=https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz dest=/home/7days/steamcmd
  become: true
  become_user: 7days

- name: Install/update SteamCMD
  unarchive:
    src=/home/7days/steamcmd/steamcmd_linux.tar.gz
    dest=/home/7days/steamcmd/
    copy=no
    owner=7days
  become: true
  become_user: 7days

# Setup 7days to die system service
- name: Install 7days systemd unit file
  copy:
    src=7days.service
    dest=/etc/systemd/system/7days.service
    owner=root
    group=root
    mode=0644
    force=no
  become: true

# Copy startup script
- name: Copy startup Script
  copy:
    src=startserver.sh
    dest=/home/7days/server/startserver.sh
    owner=7days
    group=7days
    mode=0755
    force=no
  become: true

##### begin firewall settings #####
# 1) use firewall-cmd if firewalld is utilized
# 2) insert iptables rule if iptables is used

# Firewalld
- name: Determine if firewalld is in use
  shell: systemctl is-enabled firewalld.service | egrep -qv 'masked|disabled'
  ignore_errors: true
  register: firewalld_in_use
  no_log: True

- name: Determine if firewalld is active
  shell: systemctl is-active firewalld.service | grep -vq inactive
  ignore_errors: true
  register: firewalld_is_active
  no_log: True

- name: Determine if UDP/{{seven_port}} is already active
  shell: firewall-cmd --list-ports | egrep -q "^{{seven_port}}/udp"
  ignore_errors: true
  register: firewalld_udp1_exists
  no_log: True

# add firewall rule via firewall-cmd
- name: Add firewall rule for UDP/{{seven_port}} (firewalld)
  command: "{{ item }}"
  with_items:
    - firewall-cmd --zone=public --add-port={{seven_port}}/udp --permanent
    - firewall-cmd --reload
  ignore_errors: true
  become: true
  when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_udp1_exists.rc != 0

# iptables-services
- name: check firewall rules for UDP/{{seven_port}} (iptables-services)
  shell: grep "dport {{seven_port}} \-j ACCEPT" /etc/sysconfig/iptables | wc -l
  ignore_errors: true
  register: iptables_udp1_exists
  failed_when: iptables_udp1_exists == 127
  no_log: True

- name: Add firewall rule for UDP/{{seven_port}} (iptables-services)
  lineinfile:
    dest: /etc/sysconfig/iptables
    line: '-A INPUT -p udp -m udp --dport {{seven_port}} -j ACCEPT'
    regexp: '^INPUT -i lo -j ACCEPT'
    insertbefore: '-A INPUT -i lo -j ACCEPT'
    backup: yes
  when: firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0 and iptables_udp1_exists.stdout|int == 0
  register: iptables_needs_restart

- name: Restart iptables-services for udp/{{seven_port}} (iptables-services)
  shell: systemctl restart iptables.service
  ignore_errors: true
  when: iptables_needs_restart != 0 and firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0

# Firewalld
- name: Determine if firewalld is in use
  shell: systemctl is-enabled firewalld.service | egrep -qv 'masked|disabled'
  ignore_errors: true
  register: firewalld_in_use
  no_log: True

- name: Determine if firewalld is active
  shell: systemctl is-active firewalld.service | grep -vq inactive
  ignore_errors: true
  register: firewalld_is_active
  no_log: True

- name: Determine if udp/{{data_port}} is already active
  shell: firewall-cmd --list-ports | egrep -q "^{{data_port}}/udp"
  ignore_errors: true
  register: firewalld_udp2_exists
  no_log: True

# add firewall rule via firewall-cmd
- name: Add firewall rule for udp/{{data_port}} (firewalld)
  command: "{{ item }}"
  with_items:
    - firewall-cmd --zone=public --add-port={{data_port}}/udp --permanent
    - firewall-cmd --reload
  ignore_errors: true
  become: true
  when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_udp2_exists.rc != 0

# iptables-services
- name: check firewall rules for udp/{{data_port}} (iptables-services)
  shell: grep "dport {{data_port}} \-j ACCEPT" /etc/sysconfig/iptables | wc -l
  ignore_errors: true
  register: iptables_udp2_exists
  failed_when: iptables_udp2_exists == 127
  no_log: True

- name: Add firewall rule for udp/{{data_port}} (iptables-services)
  lineinfile:
    dest: /etc/sysconfig/iptables
    line: '-A INPUT -p udp -m udp --dport {{data_port}} -j ACCEPT'
    regexp: '^INPUT -i lo -j ACCEPT'
    insertbefore: '-A INPUT -i lo -j ACCEPT'
    backup: yes
  when: firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0 and iptables_udp2_exists.stdout|int == 0
  register: iptables_needs_restart

- name: Restart iptables-services for udp/{{data_port}} (iptables-services)
  shell: systemctl restart iptables.service
  ignore_errors: true
  when: iptables_needs_restart != 0 and firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0

# Firewall for TCP/{{admin_port}}
- name: Determine if firewalld is in use
  shell: systemctl is-enabled firewalld.service | egrep -qv 'masked|disabled'
  ignore_errors: true
  register: firewalld_in_use
  no_log: True

- name: Determine if firewalld is active
  shell: systemctl is-active firewalld.service | grep -vq inactive
  ignore_errors: true
  register: firewalld_is_active
  no_log: True

- name: Determine if tcp/{{admin_port}} is already active
  shell: firewall-cmd --list-ports | egrep -q "^{{admin_port}}/tcp"
  ignore_errors: true
  register: firewalld_tcp1_exists
  no_log: True

# add firewall rule via firewall-cmd
- name: Add firewall rule for tcp/{{admin_port}} (firewalld)
  command: "{{ item }}"
  with_items:
    - firewall-cmd --zone=public --add-port={{admin_port}}/tcp --permanent
    - firewall-cmd --reload
  ignore_errors: true
  become: true
  when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_tcp1_exists.rc != 0

# iptables-services
- name: check firewall rules for tcp/{{admin_port}} (iptables-services)
  shell: grep "dport {{admin_port}} \-j ACCEPT" /etc/sysconfig/iptables | wc -l
  ignore_errors: true
  register: iptables_tcp1_exists
  failed_when: iptables_tcp1_exists == 127
  no_log: True

- name: Add firewall rule for tcp/{{admin_port}} (iptables-services)
  lineinfile:
    dest: /etc/sysconfig/iptables
    line: '-A INPUT -p tcp -m tcp --dport {{admin_port}} -j ACCEPT'
    regexp: '^INPUT -i lo -j ACCEPT'
    insertbefore: '-A INPUT -i lo -j ACCEPT'
    backup: yes
  when: firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0 and iptables_tcp1_exists.stdout|int == 0
  register: iptables_needs_restart

- name: Restart iptables-services for tcp/{{admin_port}} (iptables-services)
  shell: systemctl restart iptables.service
  ignore_errors: true
  when: iptables_needs_restart != 0 and firewalld_in_use.rc != 0 and firewalld_is_active.rc != 0

##### end firewall settings #####

- name: Downloading SteamCMD game data
  shell: "/home/7days/steamcmd/steamcmd.sh +force_install_dir /home/7days/server +login {{steam_user}} +app_update 294420 validate +quit"
  args:
    chdir: /home/7days/steamcmd
    executable: /bin/bash
  become_user: 7days

- name: Generate 7days server config
  template:
    src=serverconfig.xml.j2
    dest=/home/7days/server/serverconfig.xml
    owner=7days
    group=7days
    mode=0600
    force=yes
  become: true

- name: Copy saved game to server
  unarchive:
    copy: true
    src: "{{ upload_local_save }}"
    dest: "{{ sdtd_saves }}"
  when: upload_local_save is defined

- name: Enable 7Days service
  service: name=7days state=restarted enabled=true